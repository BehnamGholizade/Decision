@using System.Configuration
@using System.Globalization
@using System.Web.Mvc
@using Decision.Framework.MvcToolkit.Alerts.Noty

@helper IncludeGoogleAnalytics(WebViewPage page)
{
var controller = page.ViewContext.Controller;
var controllerHasAuthorizeAttribute = controller.GetType().GetCustomAttributes(typeof(AuthorizeAttribute), true).Any();
var currentActionName = page.ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
var actionHasAuthorizeAttribute = controller.GetType()
    .GetMethods()
    .Any(x => x.Name == currentActionName &&
              x.GetCustomAttributes(typeof(AuthorizeAttribute), true).Any());

if (controllerHasAuthorizeAttribute || actionHasAuthorizeAttribute)
{
    return;
}
var trackingId = ConfigurationManager.AppSettings["GoogleAnalyticsID"];
    <script type="text/javascript">
        var _gaq = _gaq || [];
        _gaq.push(["_setAccount", '@trackingId']);
        _gaq.push(["_trackPageview"]);
        (function() {
            var ga = document.createElement("script");
            ga.type = "text/javascript";
            ga.async = true;
            ga.src = ("https:" === document.location.protocol ? 'https://ssl' : 'http://www') +
                ".google-analytics.com/ga.js";
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(ga, s);
        })();
    </script>
}

@helper ShowNotyMessages(Noty notyInput)
{
if (notyInput == null)
{
    return;
}

    <script>
        $(function() {

            @foreach (var message in notyInput.NotyMessages)
            {
                @*@:var  overrideOptions= {};
                @: overrideOptions.layout= '@message.Location';
                @:overrideOptions.type= '@message.Type';
                @:overrideOptions.text='@message.Message';
                @:var overrideAnimation={};
                @:overrideAnimation.open= 'animated @message.OpenAnimation';
                @: overrideAnimation.close= 'animated @message.CloseAnimation';
                @:overrideOptions.maxVisible= @notyInput.MaxVisibleForQueue;
                @:overrideOptions.closeWith= ['@message.CloseWith'];
                @:overrideOptions.buttons= false;
                @:overrideAnimation.speed= @message.AnimateSpeed;

             if (message.IsSwing)
                {
                    @: overrideAnimation.easing='swing';
                                             }

                if (notyInput.DismissQueue)
                {
                    @: overrideOptions.dismissQueue= true;
                                            }
                if (message.IsForce)
                {
                    @:overrideOptions.force= true;
                                           }
                if (message.IsKiller)
                {
                    @:overrideOptions. killer= true;
                                                     }
                if (message.IsModal)
                {
                    @:overrideOptions.modal=true;
                                            }
                if (message.IsSticky)
                {
                    @:overrideOptions.timeout= false;

                }
                 @:overrideAnimation.fadeSpeed=50;
                 @:overrideOptions.animation=overrideAnimation;
                 @:noty(overrideOptions);*@
            @:infoNoty('@message.Message');
                            }

        });

    </script>
}

@helper CheckBoxList(string name, IEnumerable<SelectListItem> items)
{
    <div class="row">
        @foreach (var item in items)
        {
            <text>
                <div class="col-md-6">
                    <input type="checkbox" @if (item.Selected) { <text> checked="checked" </text>    }
                           id="@item.Value" name="@name" value="@item.Value" class="checkbox-inline" />
                    <label for="@item.Value" class="control-label">@item.Text</label>
                </div>
            </text>
        }
    </div>
}

@helper InitialDatePicker()
{
Func<DateTime, string> toPersianDate = date =>
{
    var dateTime = new DateTime(date.Year, date.Month, date.Day, new GregorianCalendar());
    var persianCalendar = new PersianCalendar();
    return string.Format("{0}/{1}/{2}",
        persianCalendar.GetYear(dateTime),
        persianCalendar.GetMonth(dateTime).ToString("00"),
        persianCalendar.GetDayOfMonth(dateTime).ToString("00"));
};

var today = toPersianDate(DateTime.Now);
    <script>
        $(function() {
            $(document).on('focus', 'input.datepicker', function() {
                $(this).datepicker({
                    "setDate": @today,
                    changeMonth: true, //
                    changeYear: true, // T
                    yearRange: 'c-100:c+0'
                });
            });
        });
    </script>
}
