//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Decision.DataLayer.Context.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0530d53c5a4930013975645cd655bd87099568b946b8d9e57bc1c382692eecec))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0530d53c5a4930013975645cd655bd87099568b946b8d9e57bc1c382692eecec : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0530d53c5a4930013975645cd655bd87099568b946b8d9e57bc1c382692eecec"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ActivityLog")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.AuditLog")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.UserClaim")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.UserLogin")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Notification")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.UserRole")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Role")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.UserToken")
            {
                return GetView8();
            }

            if (extentName == "ApplicationDbContext.ActivityLogs")
            {
                return GetView9();
            }

            if (extentName == "ApplicationDbContext.Users")
            {
                return GetView10();
            }

            if (extentName == "ApplicationDbContext.AuditLogs")
            {
                return GetView11();
            }

            if (extentName == "ApplicationDbContext.UserClaims")
            {
                return GetView12();
            }

            if (extentName == "ApplicationDbContext.UserLogins")
            {
                return GetView13();
            }

            if (extentName == "ApplicationDbContext.Notifications")
            {
                return GetView14();
            }

            if (extentName == "ApplicationDbContext.UserRoles")
            {
                return GetView15();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView16();
            }

            if (extentName == "ApplicationDbContext.UserTokens")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.Setting")
            {
                return GetView18();
            }

            if (extentName == "ApplicationDbContext.Settings")
            {
                return GetView19();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ActivityLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActivityLog
        [CodeFirstDatabaseSchema.ActivityLog](T1.ActivityLog_Id, T1.ActivityLog_Title, T1.ActivityLog_Description, T1.ActivityLog_Url, T1.ActivityLog_OperantIp, T1.ActivityLog_OperatedOn, T1.ActivityLog_UserId)
    FROM (
        SELECT 
            T.Id AS ActivityLog_Id, 
            T.Title AS ActivityLog_Title, 
            T.Description AS ActivityLog_Description, 
            T.Url AS ActivityLog_Url, 
            T.OperantIp AS ActivityLog_OperantIp, 
            T.OperatedOn AS ActivityLog_OperatedOn, 
            T.UserId AS ActivityLog_UserId, 
            True AS _from0
        FROM ApplicationDbContext.ActivityLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.User_Id, T1.User_IsBanned, T1.User_IsSystemAccount, T1.User_LastIp, T1.User_LastLoggedInOn, T1.User_LastActivityOn, T1.User_BannedOn, T1.User_DisplayName, T1.User_TrimmedDisplayName, T1.User_BannedReason, T1.User_RegisteredOn, T1.User_CreatedOn, T1.User_ModifiedOn, T1.User_CreatorIp, T1.User_ModifierIp, T1.User_ModifiedBy, T1.User_CreatedBy, T1.User_RowId, T1.User_RowVersion, T1.User_Email, T1.User_EmailConfirmed, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_PhoneNumber, T1.User_PhoneNumberConfirmed, T1.User_TwoFactorEnabled, T1.User_LockoutEndDateUtc, T1.User_LockoutEnabled, T1.User_AccessFailedCount, T1.User_UserName)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.IsBanned AS User_IsBanned, 
            T.IsSystemAccount AS User_IsSystemAccount, 
            T.LastIp AS User_LastIp, 
            T.LastLoggedInOn AS User_LastLoggedInOn, 
            T.LastActivityOn AS User_LastActivityOn, 
            T.BannedOn AS User_BannedOn, 
            T.DisplayName AS User_DisplayName, 
            T.TrimmedDisplayName AS User_TrimmedDisplayName, 
            T.BannedReason AS User_BannedReason, 
            T.RegisteredOn AS User_RegisteredOn, 
            T.CreatedOn AS User_CreatedOn, 
            T.ModifiedOn AS User_ModifiedOn, 
            T.CreatorIp AS User_CreatorIp, 
            T.ModifierIp AS User_ModifierIp, 
            T.ModifiedBy AS User_ModifiedBy, 
            T.CreatedBy AS User_CreatedBy, 
            T.RowId AS User_RowId, 
            T.RowVersion AS User_RowVersion, 
            T.Email AS User_Email, 
            T.EmailConfirmed AS User_EmailConfirmed, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.PhoneNumberConfirmed AS User_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS User_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS User_LockoutEndDateUtc, 
            T.LockoutEnabled AS User_LockoutEnabled, 
            T.AccessFailedCount AS User_AccessFailedCount, 
            T.UserName AS User_UserName, 
            True AS _from0
        FROM ApplicationDbContext.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AuditLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditLog
        [CodeFirstDatabaseSchema.AuditLog](T1.AuditLog_Id, T1.AuditLog_EntityId, T1.AuditLog_EntityType, T1.AuditLog_JsonOriginalValues, T1.AuditLog_JsonNewValues, T1.AuditLog_Action, T1.AuditLog_UserId)
    FROM (
        SELECT 
            T.Id AS AuditLog_Id, 
            T.EntityId AS AuditLog_EntityId, 
            T.EntityType AS AuditLog_EntityType, 
            T.JsonOriginalValues AS AuditLog_JsonOriginalValues, 
            T.JsonNewValues AS AuditLog_JsonNewValues, 
            CAST(T.Action AS [Edm.Int32]) AS AuditLog_Action, 
            T.UserId AS AuditLog_UserId, 
            True AS _from0
        FROM ApplicationDbContext.AuditLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaim
        [CodeFirstDatabaseSchema.UserClaim](T1.UserClaim_Id, T1.UserClaim_UserId, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.UserId AS UserClaim_UserId, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            True AS _from0
        FROM ApplicationDbContext.UserClaims AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLogin
        [CodeFirstDatabaseSchema.UserLogin](T1.UserLogin_LoginProvider, T1.UserLogin_ProviderKey, T1.UserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS UserLogin_LoginProvider, 
            T.ProviderKey AS UserLogin_ProviderKey, 
            T.UserId AS UserLogin_UserId, 
            True AS _from0
        FROM ApplicationDbContext.UserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Notification.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notification
        [CodeFirstDatabaseSchema.Notification](T1.Notification_Id, T1.Notification_IsDismissed, T1.Notification_Message, T1.Notification_Title, T1.Notification_Url, T1.Notification_ReceivedOn, T1.Notification_Type, T1.Notification_UserId)
    FROM (
        SELECT 
            T.Id AS Notification_Id, 
            T.IsDismissed AS Notification_IsDismissed, 
            T.Message AS Notification_Message, 
            T.Title AS Notification_Title, 
            T.Url AS Notification_Url, 
            T.ReceivedOn AS Notification_ReceivedOn, 
            CAST(T.Type AS [Edm.Int32]) AS Notification_Type, 
            T.UserId AS Notification_UserId, 
            True AS _from0
        FROM ApplicationDbContext.Notifications AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRole
        [CodeFirstDatabaseSchema.UserRole](T1.UserRole_UserId, T1.UserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS UserRole_UserId, 
            T.RoleId AS UserRole_RoleId, 
            True AS _from0
        FROM ApplicationDbContext.UserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.Role_Id, T1.Role_IsSystemRole, T1.Role_DisplayName, T1.Role_CreatedOn, T1.Role_ModifiedOn, T1.Role_CreatorIp, T1.Role_ModifierIp, T1.Role_ModifiedBy, T1.Role_CreatedBy, T1.Role_RowId, T1.Role_RowVersion, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.DisplayName AS Role_DisplayName, 
            T.CreatedOn AS Role_CreatedOn, 
            T.ModifiedOn AS Role_ModifiedOn, 
            T.CreatorIp AS Role_CreatorIp, 
            T.ModifierIp AS Role_ModifierIp, 
            T.ModifiedBy AS Role_ModifiedBy, 
            T.CreatedBy AS Role_CreatedBy, 
            T.RowId AS Role_RowId, 
            T.RowVersion AS Role_RowVersion, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserToken.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserToken
        [CodeFirstDatabaseSchema.UserToken](T1.UserToken_Id, T1.UserToken_AccessTokenHash, T1.UserToken_AccessTokenExpireOn, T1.UserToken_RefreshTokenIdHash, T1.UserToken_Subject, T1.UserToken_RefreshTokenExpiresUtc, T1.UserToken_RefreshToken, T1.UserToken_UserId)
    FROM (
        SELECT 
            T.Id AS UserToken_Id, 
            T.AccessTokenHash AS UserToken_AccessTokenHash, 
            T.AccessTokenExpireOn AS UserToken_AccessTokenExpireOn, 
            T.RefreshTokenIdHash AS UserToken_RefreshTokenIdHash, 
            T.Subject AS UserToken_Subject, 
            T.RefreshTokenExpiresUtc AS UserToken_RefreshTokenExpiresUtc, 
            T.RefreshToken AS UserToken_RefreshToken, 
            T.UserId AS UserToken_UserId, 
            True AS _from0
        FROM ApplicationDbContext.UserTokens AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.ActivityLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ActivityLogs
        [Decision.DataLayer.Context.ActivityLog](T1.ActivityLog_Id, T1.ActivityLog_Title, T1.ActivityLog_Description, T1.ActivityLog_Url, T1.ActivityLog_OperantIp, T1.ActivityLog_OperatedOn, T1.ActivityLog_UserId)
    FROM (
        SELECT 
            T.Id AS ActivityLog_Id, 
            T.Title AS ActivityLog_Title, 
            T.Description AS ActivityLog_Description, 
            T.Url AS ActivityLog_Url, 
            T.OperantIp AS ActivityLog_OperantIp, 
            T.OperatedOn AS ActivityLog_OperatedOn, 
            T.UserId AS ActivityLog_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.ActivityLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Decision.DataLayer.Context.User](T1.User_Id, T1.User_IsBanned, T1.User_IsSystemAccount, T1.User_LastIp, T1.User_LastLoggedInOn, T1.User_LastActivityOn, T1.User_BannedOn, T1.User_DisplayName, T1.User_TrimmedDisplayName, T1.User_BannedReason, T1.User_RegisteredOn, T1.User_CreatedOn, T1.User_ModifiedOn, T1.User_CreatorIp, T1.User_ModifierIp, T1.User_ModifiedBy, T1.User_CreatedBy, T1.User_RowId, T1.User_RowVersion, T1.User_Email, T1.User_EmailConfirmed, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_PhoneNumber, T1.User_PhoneNumberConfirmed, T1.User_TwoFactorEnabled, T1.User_LockoutEndDateUtc, T1.User_LockoutEnabled, T1.User_AccessFailedCount, T1.User_UserName)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.IsBanned AS User_IsBanned, 
            T.IsSystemAccount AS User_IsSystemAccount, 
            T.LastIp AS User_LastIp, 
            T.LastLoggedInOn AS User_LastLoggedInOn, 
            T.LastActivityOn AS User_LastActivityOn, 
            T.BannedOn AS User_BannedOn, 
            T.DisplayName AS User_DisplayName, 
            T.TrimmedDisplayName AS User_TrimmedDisplayName, 
            T.BannedReason AS User_BannedReason, 
            T.RegisteredOn AS User_RegisteredOn, 
            T.CreatedOn AS User_CreatedOn, 
            T.ModifiedOn AS User_ModifiedOn, 
            T.CreatorIp AS User_CreatorIp, 
            T.ModifierIp AS User_ModifierIp, 
            T.ModifiedBy AS User_ModifiedBy, 
            T.CreatedBy AS User_CreatedBy, 
            T.RowId AS User_RowId, 
            T.RowVersion AS User_RowVersion, 
            T.Email AS User_Email, 
            T.EmailConfirmed AS User_EmailConfirmed, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.PhoneNumber AS User_PhoneNumber, 
            T.PhoneNumberConfirmed AS User_PhoneNumberConfirmed, 
            T.TwoFactorEnabled AS User_TwoFactorEnabled, 
            T.LockoutEndDateUtc AS User_LockoutEndDateUtc, 
            T.LockoutEnabled AS User_LockoutEnabled, 
            T.AccessFailedCount AS User_AccessFailedCount, 
            T.UserName AS User_UserName, 
            True AS _from0
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.AuditLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditLogs
        [Decision.DataLayer.Context.AuditLog](T1.AuditLog_Id, T1.AuditLog_EntityId, T1.AuditLog_EntityType, T1.AuditLog_JsonOriginalValues, T1.AuditLog_JsonNewValues, T1.AuditLog_Action, T1.AuditLog_UserId)
    FROM (
        SELECT 
            T.Id AS AuditLog_Id, 
            T.EntityId AS AuditLog_EntityId, 
            T.EntityType AS AuditLog_EntityType, 
            T.JsonOriginalValues AS AuditLog_JsonOriginalValues, 
            T.JsonNewValues AS AuditLog_JsonNewValues, 
            CAST(T.Action AS [Decision.DataLayer.Context.AuditAction]) AS AuditLog_Action, 
            T.UserId AS AuditLog_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.AuditLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserClaims
        [Decision.DataLayer.Context.UserClaim](T1.UserClaim_Id, T1.UserClaim_UserId, T1.UserClaim_ClaimType, T1.UserClaim_ClaimValue)
    FROM (
        SELECT 
            T.Id AS UserClaim_Id, 
            T.UserId AS UserClaim_UserId, 
            T.ClaimType AS UserClaim_ClaimType, 
            T.ClaimValue AS UserClaim_ClaimValue, 
            True AS _from0
        FROM CodeFirstDatabase.UserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLogins
        [Decision.DataLayer.Context.UserLogin](T1.UserLogin_LoginProvider, T1.UserLogin_ProviderKey, T1.UserLogin_UserId)
    FROM (
        SELECT 
            T.LoginProvider AS UserLogin_LoginProvider, 
            T.ProviderKey AS UserLogin_ProviderKey, 
            T.UserId AS UserLogin_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.UserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Notifications.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notifications
        [Decision.DataLayer.Context.Notification](T1.Notification_Id, T1.Notification_IsDismissed, T1.Notification_Message, T1.Notification_Title, T1.Notification_Url, T1.Notification_ReceivedOn, T1.Notification_Type, T1.Notification_UserId)
    FROM (
        SELECT 
            T.Id AS Notification_Id, 
            T.IsDismissed AS Notification_IsDismissed, 
            T.Message AS Notification_Message, 
            T.Title AS Notification_Title, 
            T.Url AS Notification_Url, 
            T.ReceivedOn AS Notification_ReceivedOn, 
            CAST(T.Type AS [Decision.DataLayer.Context.NotificationType]) AS Notification_Type, 
            T.UserId AS Notification_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.Notification AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRoles
        [Decision.DataLayer.Context.UserRole](T1.UserRole_UserId, T1.UserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS UserRole_UserId, 
            T.RoleId AS UserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.UserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [Decision.DataLayer.Context.Role](T1.Role_Id, T1.Role_IsSystemRole, T1.Role_DisplayName, T1.Role_CreatedOn, T1.Role_ModifiedOn, T1.Role_CreatorIp, T1.Role_ModifierIp, T1.Role_ModifiedBy, T1.Role_CreatedBy, T1.Role_RowId, T1.Role_RowVersion, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.DisplayName AS Role_DisplayName, 
            T.CreatedOn AS Role_CreatedOn, 
            T.ModifiedOn AS Role_ModifiedOn, 
            T.CreatorIp AS Role_CreatorIp, 
            T.ModifierIp AS Role_ModifierIp, 
            T.ModifiedBy AS Role_ModifiedBy, 
            T.CreatedBy AS Role_CreatedBy, 
            T.RowId AS Role_RowId, 
            T.RowVersion AS Role_RowVersion, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.UserTokens.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserTokens
        [Decision.DataLayer.Context.UserToken](T1.UserToken_Id, T1.UserToken_AccessTokenHash, T1.UserToken_AccessTokenExpireOn, T1.UserToken_RefreshTokenIdHash, T1.UserToken_Subject, T1.UserToken_RefreshTokenExpiresUtc, T1.UserToken_RefreshToken, T1.UserToken_UserId)
    FROM (
        SELECT 
            T.Id AS UserToken_Id, 
            T.AccessTokenHash AS UserToken_AccessTokenHash, 
            T.AccessTokenExpireOn AS UserToken_AccessTokenExpireOn, 
            T.RefreshTokenIdHash AS UserToken_RefreshTokenIdHash, 
            T.Subject AS UserToken_Subject, 
            T.RefreshTokenExpiresUtc AS UserToken_RefreshTokenExpiresUtc, 
            T.RefreshToken AS UserToken_RefreshToken, 
            T.UserId AS UserToken_UserId, 
            True AS _from0
        FROM CodeFirstDatabase.UserToken AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Setting.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Setting
        [CodeFirstDatabaseSchema.Setting](T1.Setting_Id, T1.Setting_Name, T1.Setting_Value, T1.Setting_CreatedOn, T1.Setting_ModifiedOn, T1.Setting_CreatorIp, T1.Setting_ModifierIp, T1.Setting_ModifiedBy, T1.Setting_CreatedBy, T1.Setting_RowId, T1.Setting_RowVersion)
    FROM (
        SELECT 
            T.Id AS Setting_Id, 
            T.Name AS Setting_Name, 
            T.[Value] AS Setting_Value, 
            T.CreatedOn AS Setting_CreatedOn, 
            T.ModifiedOn AS Setting_ModifiedOn, 
            T.CreatorIp AS Setting_CreatorIp, 
            T.ModifierIp AS Setting_ModifierIp, 
            T.ModifiedBy AS Setting_ModifiedBy, 
            T.CreatedBy AS Setting_CreatedBy, 
            T.RowId AS Setting_RowId, 
            T.RowVersion AS Setting_RowVersion, 
            True AS _from0
        FROM ApplicationDbContext.Settings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Settings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Settings
        [Decision.DataLayer.Context.Setting](T1.Setting_Id, T1.Setting_Name, T1.Setting_Value, T1.Setting_CreatedOn, T1.Setting_ModifiedOn, T1.Setting_CreatorIp, T1.Setting_ModifierIp, T1.Setting_ModifiedBy, T1.Setting_CreatedBy, T1.Setting_RowId, T1.Setting_RowVersion)
    FROM (
        SELECT 
            T.Id AS Setting_Id, 
            T.Name AS Setting_Name, 
            T.[Value] AS Setting_Value, 
            T.CreatedOn AS Setting_CreatedOn, 
            T.ModifiedOn AS Setting_ModifiedOn, 
            T.CreatorIp AS Setting_CreatorIp, 
            T.ModifierIp AS Setting_ModifierIp, 
            T.ModifiedBy AS Setting_ModifiedBy, 
            T.CreatedBy AS Setting_CreatedBy, 
            T.RowId AS Setting_RowId, 
            T.RowVersion AS Setting_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.Setting AS T
    ) AS T1");
        }
    }
}
